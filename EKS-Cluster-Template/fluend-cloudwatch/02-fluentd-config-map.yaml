apiVersion: v1
data:
  containers.conf: |
    <source>
      @type tail
      @id in_tail_container_logs
      @label @containers
      path /var/log/containers/*.log
      exclude_path ["/var/log/containers/cloudwatch-agent*", "/var/log/containers/fluentd*"]
      pos_file /var/log/fluentd-containers.log.pos
      tag *
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_cwagent_logs
      @label @cwagentlogs
      path /var/log/containers/cloudwatch-agent*
      pos_file /var/log/cloudwatch-agent.log.pos
      tag *
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_fluentd_logs
      @label @fluentdlogs
      path /var/log/containers/fluentd*
      pos_file /var/log/fluentd.log.pos
      tag *
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <label @fluentdlogs>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_fluentd
        watch false
      </filter>

      <filter **>
        @type record_transformer
        @id filter_fluentd_stream_transformer
        <record>
          stream_name ${tag_parts[3]}
        </record>
      </filter>

      <match **>
        @type relabel
        @label @NORMAL
      </match>
    </label>

    <label @containers>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata
        watch false
      </filter>

      <filter **>
        @type record_transformer
        @id filter_containers_stream_transformer
        <record>
          stream_name ${tag_parts[3]}
        </record>
      </filter>

      <filter **>
        @type concat
        key log
        multiline_start_regexp /^\S/
        separator ""
        flush_interval 5
        timeout_label @NORMAL
      </filter>

      <match **>
        @type relabel
        @label @NORMAL
      </match>
    </label>

    <label @cwagentlogs>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_cwagent
        watch false
      </filter>

      <filter **>
        @type record_transformer
        @id filter_cwagent_stream_transformer
        <record>
          stream_name ${tag_parts[3]}
        </record>
      </filter>

      <filter **>
        @type concat
        key log
        multiline_start_regexp /^\d{4}[-/]\d{1,2}[-/]\d{1,2}/
        separator ""
        flush_interval 5
        timeout_label @NORMAL
      </filter>

      <match **>
        @type relabel
        @label @NORMAL
      </match>
    </label>

    <label @NORMAL>
      <match **>
        @type cloudwatch_logs
        @id out_cloudwatch_logs_containers
        region "#{ENV.fetch('AWS_REGION')}"
        log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/application"
        log_stream_name_key stream_name
        remove_log_stream_name_key true
        auto_create_stream true
        <buffer>
          flush_interval 5
          chunk_limit_size 2m
          queued_chunks_limit_size 32
          retry_forever true
        </buffer>
      </match>
    </label>
  fluent.conf: |
    @include containers.conf
    @include systemd.conf
    @include host.conf

    <match fluent.**>
      @type null
    </match>
  host.conf: |
    <source>
      @type tail
      @id in_tail_dmesg
      @label @hostlogs
      path /var/log/dmesg
      pos_file /var/log/dmesg.log.pos
      tag host.dmesg
      read_from_head true
      <parse>
        @type syslog
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_secure
      @label @hostlogs
      path /var/log/secure
      pos_file /var/log/secure.log.pos
      tag host.secure
      read_from_head true
      <parse>
        @type syslog
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_messages
      @label @hostlogs
      path /var/log/messages
      pos_file /var/log/messages.log.pos
      tag host.messages
      read_from_head true
      <parse>
        @type syslog
      </parse>
    </source>

    <label @hostlogs>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_host
        watch false
      </filter>

      <filter **>
        @type record_transformer
        @id filter_containers_stream_transformer_host
        <record>
          stream_name ${tag}-${record["host"]}
        </record>
      </filter>

      <match host.**>
        @type cloudwatch_logs
        @id out_cloudwatch_logs_host_logs
        region "#{ENV.fetch('AWS_REGION')}"
        log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/host"
        log_stream_name_key stream_name
        remove_log_stream_name_key true
        auto_create_stream true
        <buffer>
          flush_interval 5
          chunk_limit_size 2m
          queued_chunks_limit_size 32
          retry_forever true
        </buffer>
      </match>
    </label>
  systemd.conf: |
    <source>
      @type systemd
      @id in_systemd_kubelet
      @label @systemd
      filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
      <entry>
        field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
        field_map_strict true
      </entry>
      path /var/log/journal
      <storage>
        @type local
        persistent true
        path /var/log/fluentd-journald-kubelet-pos.json
      </storage>
      read_from_head true
      tag kubelet.service
    </source>

    <source>
      @type systemd
      @id in_systemd_kubeproxy
      @label @systemd
      filters [{ "_SYSTEMD_UNIT": "kubeproxy.service" }]
      <entry>
        field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
        field_map_strict true
      </entry>
      path /var/log/journal
      <storage>
        @type local
        persistent true
        path /var/log/fluentd-journald-kubeproxy-pos.json
      </storage>
      read_from_head true
      tag kubeproxy.service
    </source>

    <source>
      @type systemd
      @id in_systemd_docker
      @label @systemd
      filters [{ "_SYSTEMD_UNIT": "docker.service" }]
      <entry>
        field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
        field_map_strict true
      </entry>
      path /var/log/journal
      <storage>
        @type local
        persistent true
        path /var/log/fluentd-journald-docker-pos.json
      </storage>
      read_from_head true
      tag docker.service
    </source>

    <label @systemd>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_systemd
        watch false
      </filter>

      <filter **>
        @type record_transformer
        @id filter_systemd_stream_transformer
        <record>
          stream_name ${tag}-${record["hostname"]}
        </record>
      </filter>

      <match **>
        @type cloudwatch_logs
        @id out_cloudwatch_logs_systemd
        region "#{ENV.fetch('AWS_REGION')}"
        log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/dataplane"
        log_stream_name_key stream_name
        auto_create_stream true
        remove_log_stream_name_key true
        <buffer>
          flush_interval 5
          chunk_limit_size 2m
          queued_chunks_limit_size 32
          retry_forever true
        </buffer>
      </match>
    </label>
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"containers.conf":"\u003csource\u003e\n  @type tail\n  @id in_tail_container_logs\n  @label @containers\n  path /var/log/containers/*.log\n  exclude_path [\"/var/log/containers/cloudwatch-agent*\", \"/var/log/containers/fluentd*\"]\n  pos_file /var/log/fluentd-containers.log.pos\n  tag *\n  read_from_head true\n  \u003cparse\u003e\n    @type json\n    time_format %Y-%m-%dT%H:%M:%S.%NZ\n  \u003c/parse\u003e\n\u003c/source\u003e\n\n\u003csource\u003e\n  @type tail\n  @id in_tail_cwagent_logs\n  @label @cwagentlogs\n  path /var/log/containers/cloudwatch-agent*\n  pos_file /var/log/cloudwatch-agent.log.pos\n  tag *\n  read_from_head true\n  \u003cparse\u003e\n    @type json\n    time_format %Y-%m-%dT%H:%M:%S.%NZ\n  \u003c/parse\u003e\n\u003c/source\u003e\n\n\u003csource\u003e\n  @type tail\n  @id in_tail_fluentd_logs\n  @label @fluentdlogs\n  path /var/log/containers/fluentd*\n  pos_file /var/log/fluentd.log.pos\n  tag *\n  read_from_head true\n  \u003cparse\u003e\n    @type json\n    time_format %Y-%m-%dT%H:%M:%S.%NZ\n  \u003c/parse\u003e\n\u003c/source\u003e\n\n\u003clabel @fluentdlogs\u003e\n  \u003cfilter **\u003e\n    @type kubernetes_metadata\n    @id filter_kube_metadata_fluentd\n    watch false\n  \u003c/filter\u003e\n\n  \u003cfilter **\u003e\n    @type record_transformer\n    @id filter_fluentd_stream_transformer\n    \u003crecord\u003e\n      stream_name ${tag_parts[3]}\n    \u003c/record\u003e\n  \u003c/filter\u003e\n\n  \u003cmatch **\u003e\n    @type relabel\n    @label @NORMAL\n  \u003c/match\u003e\n\u003c/label\u003e\n\n\u003clabel @containers\u003e\n  \u003cfilter **\u003e\n    @type kubernetes_metadata\n    @id filter_kube_metadata\n    watch false\n  \u003c/filter\u003e\n\n  \u003cfilter **\u003e\n    @type record_transformer\n    @id filter_containers_stream_transformer\n    \u003crecord\u003e\n      stream_name ${tag_parts[3]}\n    \u003c/record\u003e\n  \u003c/filter\u003e\n\n  \u003cfilter **\u003e\n    @type concat\n    key log\n    multiline_start_regexp /^\\S/\n    separator \"\"\n    flush_interval 5\n    timeout_label @NORMAL\n  \u003c/filter\u003e\n\n  \u003cmatch **\u003e\n    @type relabel\n    @label @NORMAL\n  \u003c/match\u003e\n\u003c/label\u003e\n\n\u003clabel @cwagentlogs\u003e\n  \u003cfilter **\u003e\n    @type kubernetes_metadata\n    @id filter_kube_metadata_cwagent\n    watch false\n  \u003c/filter\u003e\n\n  \u003cfilter **\u003e\n    @type record_transformer\n    @id filter_cwagent_stream_transformer\n    \u003crecord\u003e\n      stream_name ${tag_parts[3]}\n    \u003c/record\u003e\n  \u003c/filter\u003e\n\n  \u003cfilter **\u003e\n    @type concat\n    key log\n    multiline_start_regexp /^\\d{4}[-/]\\d{1,2}[-/]\\d{1,2}/\n    separator \"\"\n    flush_interval 5\n    timeout_label @NORMAL\n  \u003c/filter\u003e\n\n  \u003cmatch **\u003e\n    @type relabel\n    @label @NORMAL\n  \u003c/match\u003e\n\u003c/label\u003e\n\n\u003clabel @NORMAL\u003e\n  \u003cmatch **\u003e\n    @type cloudwatch_logs\n    @id out_cloudwatch_logs_containers\n    region \"#{ENV.fetch('AWS_REGION')}\"\n    log_group_name \"/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/application\"\n    log_stream_name_key stream_name\n    remove_log_stream_name_key true\n    auto_create_stream true\n    \u003cbuffer\u003e\n      flush_interval 5\n      chunk_limit_size 2m\n      queued_chunks_limit_size 32\n      retry_forever true\n    \u003c/buffer\u003e\n  \u003c/match\u003e\n\u003c/label\u003e\n","fluent.conf":"@include containers.conf\n@include systemd.conf\n@include host.conf\n\n\u003cmatch fluent.**\u003e\n  @type null\n\u003c/match\u003e\n","host.conf":"\u003csource\u003e\n  @type tail\n  @id in_tail_dmesg\n  @label @hostlogs\n  path /var/log/dmesg\n  pos_file /var/log/dmesg.log.pos\n  tag host.dmesg\n  read_from_head true\n  \u003cparse\u003e\n    @type syslog\n  \u003c/parse\u003e\n\u003c/source\u003e\n\n\u003csource\u003e\n  @type tail\n  @id in_tail_secure\n  @label @hostlogs\n  path /var/log/secure\n  pos_file /var/log/secure.log.pos\n  tag host.secure\n  read_from_head true\n  \u003cparse\u003e\n    @type syslog\n  \u003c/parse\u003e\n\u003c/source\u003e\n\n\u003csource\u003e\n  @type tail\n  @id in_tail_messages\n  @label @hostlogs\n  path /var/log/messages\n  pos_file /var/log/messages.log.pos\n  tag host.messages\n  read_from_head true\n  \u003cparse\u003e\n    @type syslog\n  \u003c/parse\u003e\n\u003c/source\u003e\n\n\u003clabel @hostlogs\u003e\n  \u003cfilter **\u003e\n    @type kubernetes_metadata\n    @id filter_kube_metadata_host\n    watch false\n  \u003c/filter\u003e\n\n  \u003cfilter **\u003e\n    @type record_transformer\n    @id filter_containers_stream_transformer_host\n    \u003crecord\u003e\n      stream_name ${tag}-${record[\"host\"]}\n    \u003c/record\u003e\n  \u003c/filter\u003e\n\n  \u003cmatch host.**\u003e\n    @type cloudwatch_logs\n    @id out_cloudwatch_logs_host_logs\n    region \"#{ENV.fetch('AWS_REGION')}\"\n    log_group_name \"/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/host\"\n    log_stream_name_key stream_name\n    remove_log_stream_name_key true\n    auto_create_stream true\n    \u003cbuffer\u003e\n      flush_interval 5\n      chunk_limit_size 2m\n      queued_chunks_limit_size 32\n      retry_forever true\n    \u003c/buffer\u003e\n  \u003c/match\u003e\n\u003c/label\u003e\n","systemd.conf":"\u003csource\u003e\n  @type systemd\n  @id in_systemd_kubelet\n  @label @systemd\n  filters [{ \"_SYSTEMD_UNIT\": \"kubelet.service\" }]\n  \u003centry\u003e\n    field_map {\"MESSAGE\": \"message\", \"_HOSTNAME\": \"hostname\", \"_SYSTEMD_UNIT\": \"systemd_unit\"}\n    field_map_strict true\n  \u003c/entry\u003e\n  path /var/log/journal\n  \u003cstorage\u003e\n    @type local\n    persistent true\n    path /var/log/fluentd-journald-kubelet-pos.json\n  \u003c/storage\u003e\n  read_from_head true\n  tag kubelet.service\n\u003c/source\u003e\n\n\u003csource\u003e\n  @type systemd\n  @id in_systemd_kubeproxy\n  @label @systemd\n  filters [{ \"_SYSTEMD_UNIT\": \"kubeproxy.service\" }]\n  \u003centry\u003e\n    field_map {\"MESSAGE\": \"message\", \"_HOSTNAME\": \"hostname\", \"_SYSTEMD_UNIT\": \"systemd_unit\"}\n    field_map_strict true\n  \u003c/entry\u003e\n  path /var/log/journal\n  \u003cstorage\u003e\n    @type local\n    persistent true\n    path /var/log/fluentd-journald-kubeproxy-pos.json\n  \u003c/storage\u003e\n  read_from_head true\n  tag kubeproxy.service\n\u003c/source\u003e\n\n\u003csource\u003e\n  @type systemd\n  @id in_systemd_docker\n  @label @systemd\n  filters [{ \"_SYSTEMD_UNIT\": \"docker.service\" }]\n  \u003centry\u003e\n    field_map {\"MESSAGE\": \"message\", \"_HOSTNAME\": \"hostname\", \"_SYSTEMD_UNIT\": \"systemd_unit\"}\n    field_map_strict true\n  \u003c/entry\u003e\n  path /var/log/journal\n  \u003cstorage\u003e\n    @type local\n    persistent true\n    path /var/log/fluentd-journald-docker-pos.json\n  \u003c/storage\u003e\n  read_from_head true\n  tag docker.service\n\u003c/source\u003e\n\n\u003clabel @systemd\u003e\n  \u003cfilter **\u003e\n    @type kubernetes_metadata\n    @id filter_kube_metadata_systemd\n    watch false\n  \u003c/filter\u003e\n\n  \u003cfilter **\u003e\n    @type record_transformer\n    @id filter_systemd_stream_transformer\n    \u003crecord\u003e\n      stream_name ${tag}-${record[\"hostname\"]}\n    \u003c/record\u003e\n  \u003c/filter\u003e\n\n  \u003cmatch **\u003e\n    @type cloudwatch_logs\n    @id out_cloudwatch_logs_systemd\n    region \"#{ENV.fetch('AWS_REGION')}\"\n    log_group_name \"/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/dataplane\"\n    log_stream_name_key stream_name\n    auto_create_stream true\n    remove_log_stream_name_key true\n    \u003cbuffer\u003e\n      flush_interval 5\n      chunk_limit_size 2m\n      queued_chunks_limit_size 32\n      retry_forever true\n    \u003c/buffer\u003e\n  \u003c/match\u003e\n\u003c/label\u003e\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"k8s-app":"fluentd-cloudwatch"},"name":"fluentd-config","namespace":"amazon-cloudwatch"}}
  labels:
    k8s-app: fluentd-cloudwatch
  name: fluentd-config
  namespace: amazon-cloudwatch