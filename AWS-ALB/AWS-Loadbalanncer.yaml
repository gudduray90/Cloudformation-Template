AWSTemplateFormatVersion: 2010-09-09
Description: 'Create ALB, ALB security group, target groups, listeners and listener rules'
Parameters:
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: The vpc to launch the service
    Default: ''
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet::Id'
    Description: The subnet where to launch the service
    Default: ''
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet::Id'
    Description: the subnet where to Launch the service
    Default: ''
  LoadBalancerCertificateArn:
    Description: >-
      Optional Amazon Resource Name (ARN) of the certificate to associate with
      the load balancer.
    Type: String
    Default: ''
Conditions:
  HasLoadBalancerCertificateArn: !Not 
    - !Equals 
      - !Ref LoadBalancerCertificateArn
      - ''
Resources:
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group for ALB
      GroupName: ALB-SG
      Tags:
        - Key: Project
          Value: example.com
        - Key: createdBy
          Value: uipl
        - Key: Environment
          Value: UAT
        - Key: Name
          Value: example.com
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: -Testing-AWS-ALB
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'false'
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: deletion_protection.enabled
          Value: 'false'
        - Key: routing.http2.enabled
          Value: 'true'
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: 'false'
  MagentoTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      Port: 80
      Protocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: instance
      Matcher:
        HttpCode: '200'
      HealthyThresholdCount: 5
      VpcId: !Ref VPC
      Name: AWS-ALB-TG
      HealthCheckEnabled: true
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'false'
        - Key: deregistration_delay.timeout_seconds
          Value: '300'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '86400'
        - Key: slow_start.duration_seconds
          Value: '0'
        - Key: load_balancing.algorithm.type
          Value: round_robin
  HTTPListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301
          Type: redirect
  httpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: HasLoadBalancerCertificateArn
    Properties:
      Certificates:
        - CertificateArn: !Ref LoadBalancerCertificateArn
      DefaultActions:
        - TargetGroupArn: !Ref MagentoTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
Outputs:
  ALB:
    Description: The created loadbalancer
    Value: !Ref ApplicationLoadBalancer
  TargetGroup1:
    Description: The created TargetGroup 1
    Value: !Ref MagentoTargetGroup
  LoadBalancerSecurityGroup:
    Description: the securty group for the ALB
    Value: !Ref ALBSecurityGroup

