AWSTemplateFormatVersion: 2010-09-09
Description: AWS EC2 (Virtual Machine) setup in ap-south-1
Parameters:
  NetworkStackName:
    Description: >-
      Name of an active CloudFormation stack that contains the networking
      resources, such as the subnet and security group, that will be used in
      this stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: Network-stack-name-VPC
  Ec2StackName:
    Description: >-
      Name of an active CloudFormation stack that contains the networking
      resources, such as the subnet and security group, that will be used in
      this stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: EC2-Stack-Name
Resources:
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ALB-SERVER-SG
      VpcId: !ImportValue 
        'Fn::Sub': '${NetworkStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: businessunit
          Value: default
        - Key: appname
          Value: example.com
        - Key: ownername
          Value: example.com
        - Key: Name
          Value: !Join 
            - '-'
            - - !ImportValue 
                'Fn::Sub': '${NetworkStackName}-envPrefix'
              - ALB-SERVER-SG
        - Key: environment
          Value: preprod
  LoadBalancer1:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: ALB-SEERVER
      Scheme: internet-facing
      Subnets:
        - !ImportValue 
          'Fn::Sub': '${NetworkStackName}-PublicSubnet1ID'
        - !ImportValue 
          'Fn::Sub': '${NetworkStackName}-PublicSubnet2ID'
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '1050'
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: businessunit
          Value: default
        - Key: appname
          Value: example.com
        - Key: ownername
          Value: example.com
        - Key: Name
          Value: !Join 
            - '-'
            - - !ImportValue 
                'Fn::Sub': '${NetworkStackName}-envPrefix'
              - ALB-SERVER
        - Key: environment
          Value: production
  TargetGroup80:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Name: APP-TG-80
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Targets:
        - Id: !ImportValue 
            'Fn::Sub': '${Ec2StackName}-AppEc2Instance01'
          Port: 80
      UnhealthyThresholdCount: 10
      VpcId: !ImportValue 
        'Fn::Sub': '${NetworkStackName}-VPCID'
      Tags:
        - Key: Name
          Value: APP-TG-80
        - Key: environment
          Value: preprod
  ProSiteListener80:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup80
      LoadBalancerArn: !Ref LoadBalancer1
      Port: '80'
      Protocol: HTTP
Outputs:
  ALBSecurityGroup:
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ALBSecurityGroup'
  LoadBalancer1:
    Value: !Ref LoadBalancer1
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancer1'
  TargetGroup80:
    Value: !Ref TargetGroup80
    Export:
      Name: !Sub '${AWS::StackName}-TargetGroup80'

